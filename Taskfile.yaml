version: '3'

vars:
  COMPOSE_FILE: docker-compose.yml
  COMPOSE: docker compose
  CONTAINER_NAME: react-admin-api-bundle-app
  TEST_DIR: .symfony-test

tasks:
  # Docker Management
  up:
    desc: 'Start development environment'
    cmd: |
      {{ .COMPOSE }} up -d
    aliases: ['u']

  down:
    desc: 'Stop development environment'
    cmd: '{{ .COMPOSE }} down'
    aliases: ['d']

  restart:
    desc: 'Restart development environment'
    cmds:
      - task: down
      - task: up
    aliases: ['r']

  # Development Tasks
  php:shell:
    desc: 'Open shell in PHP container'
    cmd: 'docker exec -it {{ .CONTAINER_NAME }} sh'
    aliases: ['sh']

  dev:serve:
    desc: 'Start development server'
    cmd: 'docker exec -it {{ .CONTAINER_NAME }} php -S 0.0.0.0:8080 -t dev/'
    aliases: ['serve']

  composer:install:
    desc: 'Install composer dependencies'
    cmd: 'docker exec -it {{ .CONTAINER_NAME }} composer install'
    aliases: ['install']

  composer:update:
    desc: 'Update composer dependencies'
    cmd: 'docker exec -it {{ .CONTAINER_NAME }} composer update'
    aliases: ['update']

  # Test Environment Setup
  test:prepare:
    desc: 'Prepare test environment'
    cmds:
      - rm -rf {{ .TEST_DIR }}
      - mkdir -p {{ .TEST_DIR }}/vendor
      - cp -r src {{ .TEST_DIR }}/
      - cp -r tests {{ .TEST_DIR }}/
      - cp -r dev {{ .TEST_DIR }}/
      - cp phpunit.xml.dist {{ .TEST_DIR }}/phpunit.xml
      - cp .env.test {{ .TEST_DIR }}/ || true
      - cp -r config {{ .TEST_DIR }}/ || true

  # Testing Different Symfony Versions
  test:symfony64:
    desc: 'Test with Symfony 6.4'
    cmds:
      - task: test:prepare
      - cp test/symfony64/composer.json {{ .TEST_DIR }}/composer.json
      - docker exec -it {{ .CONTAINER_NAME }} sh -c "cd /app/{{ .TEST_DIR }} && composer install --no-interaction"
      - docker exec -it {{ .CONTAINER_NAME }} sh -c "cd /app/{{ .TEST_DIR }} && vendor/bin/phpunit"
    aliases: ['t:64']

  test:symfony71:
    desc: 'Test with Symfony 7.1'
    cmds:
      - task: test:prepare
      - cp test/symfony71/composer.json {{ .TEST_DIR }}/composer.json
      - docker exec -it {{ .CONTAINER_NAME }} sh -c "cd /app/{{ .TEST_DIR }} && composer install --no-interaction"
      - docker exec -it {{ .CONTAINER_NAME }} sh -c "cd /app/{{ .TEST_DIR }} && vendor/bin/phpunit"
    aliases: ['t:71']

  test:all:
    desc: 'Test with all Symfony versions'
    cmds:
      - task: test:symfony64
      - task: test:symfony71
    aliases: ['t:all']

  test:cleanup:
    desc: 'Clean test environment'
    cmd: rm -rf {{ .TEST_DIR }}
    aliases: ['t:clean']

  # Code Quality
  stan:
    desc: 'Run PHPStan analysis'
    cmd: 'docker exec -it {{ .CONTAINER_NAME }} vendor/bin/phpstan analyse src'
    aliases: ['lint']

  cs:fix:
    desc: 'Fix code style'
    cmd: 'docker exec -it {{ .CONTAINER_NAME }} vendor/bin/php-cs-fixer fix'
    aliases: ['fix', 'fixer']

  test:
    desc: 'Run PHPUnit tests'
    cmd: 'docker exec -it {{ .CONTAINER_NAME }} vendor/bin/phpunit'
    aliases: ['t']
  
  # React Admin Development
  admin:dev:
    desc: 'Start React Admin development server'
    cmd: 'cd dev/admin-app && npm run dev'
    aliases: ['admin']

  admin:install:
    desc: 'Install React Admin dependencies'
    cmd: 'cd dev/admin-app && npm install'

  admin:build:
    desc: 'Build React Admin for production'
    cmd: 'cd dev/admin-app && npm run build'

  # Combined Development Tasks
  dev:
    desc: 'Start both API server and React Admin dev server'
    cmds:
      - 'docker exec -d {{ .CONTAINER_NAME }} php -S 0.0.0.0:8080 -t dev/'
      - task: admin:dev
    aliases: ['start']

  dev:with-assets:
    desc: 'Start development with assets watching'
    cmds:
      - task: assets:build
      - 'docker exec -d {{ .CONTAINER_NAME }} php -S 0.0.0.0:8080 -t dev/'
      - task: assets:watch &
      - task: admin:dev
    aliases: ['dev:assets']

  build:all:
    desc: 'Build everything for production'
    cmds:
      - task: assets:build
      - task: admin:build
    aliases: ['build']

  # Assets Management
  assets:install:
    desc: 'Install assets dependencies'
    cmd: 'cd assets && npm install'
    aliases: ['assets:i']

  assets:build:
    desc: 'Build assets for production'
    cmds:
      - task: assets:clean
      - cd assets && npm run build
    aliases: ['assets:b']

  assets:watch:
    desc: 'Watch assets for changes'
    cmd: 'cd assets && npm run watch'
    aliases: ['assets:w']

  assets:clean:
    desc: 'Clean assets dist folder'
    cmd: 'cd assets && npm run clean'
    aliases: ['assets:c']

  assets:lint:
    desc: 'Lint assets TypeScript files'
    cmd: 'cd assets && npm run lint'
    aliases: ['assets:l']

  assets:lint:fix:
    desc: 'Fix assets linting issues'
    cmd: 'cd assets && npm run lint:fix'
    aliases: ['assets:lf']

  assets:format:
    desc: 'Format assets TypeScript files'
    cmd: 'cd assets && npm run format'
    aliases: ['assets:f']

  assets:format:check:
    desc: 'Check assets formatting'
    cmd: 'cd assets && npm run format:check'
    aliases: ['assets:fc']

  # Setup task
  setup:
    desc: 'Setup project (start docker, install dependencies)'
    cmds:
      - task: up
      - task: composer:install
      - task: assets:install
    aliases: ['init']
  
  default:
    desc: 'Show available commands'
    cmds:
      - task --list